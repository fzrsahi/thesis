/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/auth/session": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get session information
     * @description Retrieve session information for the authenticated user
     */
    get: operations["getSession"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/my-recommendation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get personalized competition recommendations
     * @description Fetches personalized recommendations for the logged-in student, processed in the background using LLM and RAG.
     */
    get: operations["getMyRecommendations"];
    put?: never;
    /**
     * Generate student recommendation
     * @description Generate a new recommendation for the student
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Recommendation generated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/students": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get student list with filter
     * @description Get all students, optionally filtered by query parameters such as name, email, or studentId
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number (1-based) */
          page?: components["parameters"]["PageParam"];
          /** @description Items per page */
          limit?: components["parameters"]["LimitParam"];
          /** @description Free-text search keywords */
          keywords?: components["parameters"]["KeywordsParam"];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of students retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              data?: {
                id?: number;
                name?: string;
                email?: string;
                studentId?: string;
              }[];
              pagination?: components["schemas"]["Pagination"];
            };
          };
        };
      };
    };
    put?: never;
    /**
     * Create student
     * @description Create a new student
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            email: string;
            studentId: string;
          };
        };
      };
      responses: {
        /** @description Student created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              data?: {
                name?: string;
                email?: string;
                studentId?: string;
              };
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/students/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get student
     * @description Get a student
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Student retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              success?: boolean;
              data?: {
                id?: number;
                user?: {
                  name?: string;
                  email?: string;
                };
                studentId?: string | null;
                transcript?: {
                  id?: number;
                  fileId?: string;
                  semester?: string;
                  transcriptText?: string;
                  fileUrl?: string;
                }[];
                achievements?: {
                  id?: number;
                  studentId?: number;
                  title?: string;
                  description?: string;
                  /** Format: date-time */
                  date?: string;
                  /** Format: date-time */
                  createdAt?: string;
                }[];
                experiences?: {
                  id?: number;
                  organization?: string;
                  position?: string;
                  /** Format: date-time */
                  startDate?: string;
                  /** Format: date-time */
                  endDate?: string;
                  description?: string;
                }[];
                gpa?: string;
                interests?: string[];
                skills?: string[];
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                recommendations?: {
                  id?: number;
                  studentId?: number;
                  prompt?: string;
                  studentSummary?: string;
                  overallAssessment?: string;
                  competitionRecommendations?: Record<string, never>[];
                  developmentSuggestions?: {
                    id?: number;
                    type?: string;
                    title?: string;
                    link?: string;
                    reason?: string;
                  }[];
                  skillsProfiles?: {
                    id?: number;
                    skillName?: string;
                    score?: number;
                    breakdown?: string;
                  }[];
                }[];
              };
            };
          };
        };
      };
    };
    /**
     * Update student
     * @description Update a student
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: never;
    };
    post?: never;
    /**
     * Delete student
     * @description Delete a student
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Student deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/students/personal-data": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get student personal data
     * @description Retrieve current student's personal profile information
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Student personal data retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              data?: {
                name?: string;
                email?: string;
                studentId?: string;
              };
            };
          };
        };
      };
    };
    /**
     * Update student personal data
     * @description Update student's personal profile information
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["StudentPersonalDataUpdate"];
        };
      };
      responses: {
        /** @description Student personal data updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              data?: components["schemas"]["StudentPersonalData"];
            };
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/students/academic-data": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get student academic data
     * @description Retrieve all academic information for the current student including achievements and memberships
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Student academic data retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              data?: components["schemas"]["StudentAcademicData"];
            };
          };
        };
      };
    };
    /**
     * Update student academic data
     * @description Update student's academic information including achievements and memberships
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["StudentAcademicDataUpdate"];
        };
      };
      responses: {
        /** @description Student academic data updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              data?: components["schemas"]["StudentAcademicData"];
            };
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/students/transcript": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get student transcripts
     * @description Get all transcripts for the current student
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully retrieved transcripts */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              success?: boolean;
              data?: {
                id?: number;
                semester?: string;
                fileUrl?: string;
              }[];
              pagination?: components["schemas"]["Pagination"];
            };
          };
        };
      };
    };
    put?: never;
    /**
     * Upload student transcript
     * @description Upload student's transcript file
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /**
             * Format: binary
             * @description Transcript file upload (PDF format)
             */
            transcript?: string;
            /** @description Semester of the transcript */
            semester?: string;
          };
        };
      };
      responses: never;
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/students/transcript/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete student transcript
     * @description Delete a transcript for the current student
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Transcript deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/competitions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get competition list
     * @description Get all competitions
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number (1-based) */
          page?: components["parameters"]["PageParam"];
          /** @description Items per page */
          limit?: components["parameters"]["LimitParam"];
          /** @description Free-text search keywords */
          keywords?: components["parameters"]["KeywordsParam"];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Competition list retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              data?: components["schemas"]["Competition"][];
              pagination?: components["schemas"]["Pagination"];
            };
          };
        };
      };
    };
    put?: never;
    /**
     * Create competition
     * @description Create a new competition
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["GenerateCompetitionResponse"];
        };
      };
      responses: {
        /** @description Competition created successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/competitions/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get competition by ID
     * @description Retrieve a single competition in detail by its ID.
     */
    get: operations["getCompetitionById"];
    put?: never;
    post?: never;
    /**
     * Delete competition by ID
     * @description Delete a competition by its ID.
     */
    delete: operations["deleteCompetitionById"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/competitions/generate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Generate competition
     * @description Generate a new competition
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            title: string;
            description: string;
            website: string;
            additionalDetails?: string;
            /**
             * Format: binary
             * @description Optional file upload
             */
            file?: string;
            /** @description Starting page number (optional, only if file is provided) */
            startPage?: number;
            /** @description Ending page number (optional, only if file is provided) */
            endPage?: number;
          };
        };
      };
      responses: {
        /** @description Competition generated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example true */
              success: boolean;
              data: components["schemas"]["GenerateCompetitionResponse"];
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/advisors": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get advisor list
     * @description Get all advisors with optional pagination and keyword search
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number (1-based) */
          page?: components["parameters"]["PageParam"];
          /** @description Items per page */
          limit?: components["parameters"]["LimitParam"];
          /** @description Free-text search keywords */
          keywords?: components["parameters"]["KeywordsParam"];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Advisor list retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              data?: components["schemas"]["Advisor"][];
              pagination?: components["schemas"]["Pagination"];
            };
          };
        };
      };
    };
    put?: never;
    /**
     * Create advisor
     * @description Create a new advisor
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["AdvisorCreate"];
        };
      };
      responses: {
        /** @description Advisor created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/advisors/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete advisor
     * @description Delete an advisor by ID
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Advisor deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
            };
          };
        };
        /** @description Advisor not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/chat": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Chat with LLM (streaming)
     * @description Chat with advisor. The response is streamed via Server-Sent Events (SSE).
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ChatRequest"];
        };
      };
      responses: {
        /** @description SSE stream of chat messages. Each event contains incremental assistant output. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/event-stream": string;
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Pagination: {
      /** @example 100 */
      total: number;
      /** @example 1 */
      page: number;
      /** @example 10 */
      limit: number;
      /** @example 10 */
      totalPages: number;
      /** @example true */
      hasNextPage: boolean;
      /** @example false */
      hasPrevPage: boolean;
    };
    Advisor: {
      id: number;
      userId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    AdvisorCreate: {
      name?: string;
      email?: string;
    };
    AdvisorUpdate: {
      userId?: number;
    };
    Competition: {
      id?: number;
      title?: string;
      description?: string;
      organizer?: string | null;
      field?: string[];
      type?: string | null;
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
    };
    CompetitionDetail: {
      id: number;
      title: string;
      description: string;
      field: string[];
      type?: string | null;
      minGPA?: string | null;
      requirements?: {
        [key: string]: unknown;
      } | null;
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      location?: string | null;
      organizer?: string | null;
      evaluationCriteria?: {
        [key: string]: unknown;
      } | null;
      sourceUrl?: string | null;
      relevantCourses?: string[];
      relevantSkills?: string[];
      fileId?: string | null;
      content?: string | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    SuccessResponse: {
      /** @example true */
      success: boolean;
      data: components["schemas"]["RecommendationResponse"];
    };
    GenerateCompetitionResponse: {
      /**
       * @description The exact name of the competition
       * @example LIDM 2025 - Inovasi Teknologi Digital Pendidikan (Divisi1)
       */
      title: string;
      /** @description A brief overview of the competition's purpose and scope */
      description: string;
      /**
       * @description The primary domain(s) of the competition
       * @example [
       *       "Educational Technology",
       *       "Software Development"
       *     ]
       */
      field: string[];
      /** @description Indicates whether participants compete solo or in groups */
      type: string | null;
      /** @description Minimum GPA requirement for eligibility, if specified; otherwise, null */
      minGPA: string | null;
      requirements: {
        /**
         * @description Details on team size and composition
         * @example 3-5 students from the same university
         */
        teamComposition: string | null;
        /**
         * @description Rules about the originality of submissions
         * @example Work must be original
         */
        originality: string | null;
        /**
         * @description Additional eligibility criteria
         * @example Must submit a proposal
         */
        other: string | null;
      };
      /**
       * @description The competition's start or registration date (YYYY-MM-DD format)
       * @example 2025-01-01
       */
      startDate: string | null;
      /**
       * @description The competition's end or final date (YYYY-MM-DD format)
       * @example 2025-01-01
       */
      endDate: string | null;
      /** @description The event's location, e.g., 'Online' or a specific city/university; null if unspecified */
      location: string | null;
      /**
       * @description The organizing entity
       * @example Ministry of Education
       */
      organizer: string | null;
      evaluationCriteria: {
        /**
         * @description Criteria for initial judging
         * @example Originality: 30%, Impact: 30%
         */
        preliminaryRound: string | null;
        /**
         * @description Criteria for final judging
         * @example Presentation and functionality
         */
        finalRound: string | null;
        /** @description Other evaluation criteria */
        other: string | null;
      };
      competitionStatistics: {
        /** @description A brief overview of historical participation data, including years and sources */
        summary: string | null;
        totalApplicantsPastYear: {
          /** @description Number of teams or individuals who applied in the specified year */
          count: number | null;
          /**
           * @description The year of the applicant data
           * @example 2023
           */
          year: string | null;
        }[];
        pastUngParticipants: {
          /** @description Year of participation */
          year: string;
          /** @description Name of the participant from UNG */
          name: string;
          /** @description Number of team members or 1 if individual */
          count: number;
        }[];
      };
      /** @description The primary website or document URL for the competition */
      sourceUrl: string;
      /**
       * @description Academic courses directly relevant to the competition's technical or non-technical focus
       * @example [
       *       "Software Engineering",
       *       "Instructional Design"
       *     ]
       */
      relevantCourses: string[];
      /**
       * @description Skills directly relevant to the competition's technical or non-technical requirements
       * @example [
       *       "Python",
       *       "Instructional Design"
       *     ]
       */
      relevantSkills: string[];
    };
    RecommendationResponse: {
      /** @description Basic student information */
      student: {
        /** @example student */
        name: string;
        /** @example student@gmail.com */
        email: string;
      };
      result: {
        /**
         * @description Comprehensive summary of the student's academic and professional background
         * @example Mahasiswa Teknik Informatika dengan IPK 3.66, menonjol dalam penguasaan pemrograman, pengelolaan sistem, dan teknologi berbasis data. Berpengalaman sebagai Software Developer di Jepang dan beberapa magang sebelumnya. Memiliki minat utama di bidang Programming, Backend Development, dan Software Engineering.
         */
        studentSummary: string;
        /**
         * @description Detailed skill profile with scores and explanations
         * @example {
         *       "technicalExpertise": {
         *         "score": 0.85,
         *         "breakdown": "Memiliki pengalaman kerja nyata sebagai Software Developer di Jepang dan magang di Ditjen Diktiristek serta Thinkspedia. Berhasil mengembangkan backend sistem kompleks dan meningkatkan performa unit testing hingga 90%."
         *       },
         *       "scientificWriting": {
         *         "score": 0.5,
         *         "breakdown": "Belum ada pengalaman dalam publikasi ilmiah atau proposal yang didanai. Namun, mampu menyusun laporan kerja praktik dengan baik."
         *       }
         *     }
         */
        skillsProfile: {
          [key: string]: {
            /** Format: float */
            score: number;
            breakdown: string;
          };
        };
        /** @description Overall assessment of student's profile */
        overallAssessment: {
          /** @example [
           *       "Kemampuan teknis yang sangat baik dalam pengembangan backend.",
           *       "Kemandirian belajar sangat tinggi.",
           *       "Kemampuan problem solving yang solid dalam konteks teknis."
           *     ] */
          strengths: string[];
          /** @example [
           *       "Minim pengalaman dalam penulisan ilmiah.",
           *       "Kurangnya paparan dalam design thinking.",
           *       "Belum ada pengalaman dalam kewirausahaan dan bisnis."
           *     ] */
          weaknesses: string[];
        };
        /** @description List of recommended competitions */
        recommendations: {
          /** @example 5 */
          id: number;
          /** @example Program Kreativitas Mahasiswa bidang Karsa Cipta */
          competitionName: string;
          /** @example 1 */
          rank: number;
          matchScore: {
            /**
             * Format: float
             * @example 0.78
             */
            score: number;
            /** @example Mahasiswa memiliki kemampuan teknis yang kuat dan pengalaman dalam pengembangan prototipe yang mendukung kesuksesan di kompetisi ini. Namun, perlu meningkatkan kreativitas dan kemampuan menulis ilmiah untuk mendukung laporan. */
            reason: string;
          };
          /** @example {
           *       "technicalExpertise": {
           *         "weight": 0.8,
           *         "breakdown": "Kompetisi ini memerlukan kemampuan teknis tinggi untuk merancang dan membangun prototipe yang inovatif."
           *       }
           *     } */
          skillRequirements: {
            [key: string]: {
              /** Format: float */
              weight: number;
              breakdown: string;
            };
          };
          reasoning: {
            /** @example Kompetisi ini sesuai dengan kekuatan teknis mahasiswa dan memberikan peluang untuk mengasah kreativitas serta kemampuan ilmiah. */
            summary: string;
            /** @example [
             *       "Kemampuan teknis mahasiswa mendukung pembangunan prototipe.",
             *       "Pengalaman dalam tim relevan dengan kebutuhan kerja sama kompetisi."
             *     ] */
            pros: string[];
            /** @example [
             *       "Kurangnya pengalaman dalam kreativitas tingkat tinggi.",
             *       "Minimnya pengalaman dalam penulisan laporan ilmiah."
             *     ] */
            cons: string[];
          };
          /** @example [
           *       "Kemampuan teknis dalam prototyping.",
           *       "Kreativitas dalam menghasilkan ide inovatif.",
           *       "Kemampuan menyusun laporan akhir yang berkualitas."
           *     ] */
          keyFactors: string[];
          /** @example [
           *       "Ikuti pelatihan penulisan ilmiah untuk meningkatkan kualitas laporan.",
           *       "Latih brainstorming untuk meningkatkan kreativitas ide.",
           *       "Perkuat kerja sama tim dengan simulasi proyek bersama."
           *     ] */
          preparationTips: string[];
          competition: {
            /** @example PKM KC adalah singkatan dari Program Kreativitas Mahasiswa bidang Karsa Cipta. Ini adalah salah satu jenis Program Kreativitas Mahasiswa (PKM) yang diselenggarakan oleh Direktorat Pembelajaran dan Kemahasiswaan, Direktorat Jenderal Pendidikan Tinggi, Kementerian Pendidikan dan Kebudayaan (Kemendikbud) Republik Indonesia. */
            description: string;
            /** @example [
             *       "Semua bidang keilmuan"
             *     ] */
            field: string[];
            /** @example Rancang Bangun Prototipe */
            type: string;
            /** @example  */
            minGPA: string;
            /** @example Daring dan Luring (Hybrid) */
            location: string;
            /** @example Direktorat Pembelajaran dan Kemahasiswaan, Direktorat Jenderal Pendidikan Tinggi, Kementerian Pendidikan dan Kebudayaan (Kemendikbud) Republik Indonesia */
            organizer: string;
            /**
             * Format: date-time
             * @example null
             */
            startDate: string | null;
            /**
             * Format: date-time
             * @example null
             */
            endDate: string | null;
            /** @example simbelmawa.kemdikbud.go.id */
            sourceUrl: string;
            /** @example [
             *       "Kewirausahaan",
             *       "Teknik Mesin",
             *       "Teknik Elektro",
             *       "Teknik Informatika"
             *     ] */
            relevantCourses: string[];
            /** @example [
             *       "Rancang Bangun",
             *       "Problem Solving",
             *       "Kreativitas",
             *       "Kerja Tim"
             *     ] */
            relevantSkills: string[];
            /** @example {
             *       "other": null,
             *       "originality": null,
             *       "teamComposition": null
             *     } */
            requirements: Record<string, never> | null;
            /** @example {
             *       "other": "Kelengkapan laporan akhir.",
             *       "finalRound": "Kualitas prototipe, penguasaan materi, dan presentasi.",
             *       "preliminaryRound": "Kreativitas, keaslian ide, dan potensi implementasi."
             *     } */
            evaluationCriteria: Record<string, never> | null;
            competitionStats: {
              /** @description A brief overview of historical participation data, including years and sources */
              summary?: string | null;
              totalApplicantsPastYear: {
                /** @description Number of teams or individuals who applied in the specified year */
                count: number | null;
                /**
                 * @description The year of the applicant data
                 * @example 2023
                 */
                year: string | null;
              }[];
              pastUngParticipants: {
                /** @description Year of participation */
                year: string | null;
                /** @description Name of the participant from UNG */
                name: string | null;
                /** @description Number of team members or 1 if individual */
                count: number | null;
              }[];
            };
          };
        }[];
        /** @description Development suggestions for skill improvement */
        developmentSuggestions: {
          /**
           * @example course
           * @enum {string}
           */
          type: "course" | "practice" | "certification";
          /** @example Introduction to Scientific Writing */
          title: string;
          /**
           * Format: uri
           * @example https://www.coursera.org/learn/scientific-writing
           */
          link: string;
          /** @example Untuk meningkatkan kemampuan mahasiswa dalam menyusun laporan akhir yang berkualitas. */
          reason: string;
        }[];
      };
    };
    StudentPersonalData: {
      id?: number;
      name?: string;
      email?: string;
      studentId?: string;
      major?: string;
      interests?: string[];
    };
    StudentPersonalDataUpdate: {
      name?: string;
      email?: string;
      studentId?: string;
    };
    StudentAcademicData: {
      gpa?: string;
      interests?: string[];
      skills?: string[];
      achievements?: components["schemas"]["Achievement"][];
      experiences?: components["schemas"]["Experience"][];
    };
    ChatRequest: {
      message?: string;
    };
    ChatResponse: {
      message?: string;
    };
    StudentAcademicDataUpdate: {
      gpa?: string;
      interests?: string[];
      achievements?: components["schemas"]["AchievementCreate"][];
      experiences?: components["schemas"]["ExperienceCreate"][];
    };
    Achievement: {
      id?: number;
      title?: string;
      description?: string;
      /** Format: date */
      date?: string;
    };
    AchievementCreate: {
      title: string;
      description: string;
      /** Format: date */
      date: string;
    };
    Experience: {
      id?: number;
      organization?: string;
      description?: string;
      position?: string;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string;
    };
    ExperienceCreate: {
      organization: string;
      position: string;
      description: string;
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate?: string;
    };
    ErrorResponse: {
      error?: string;
      message?: string;
    };
  };
  responses: never;
  parameters: {
    /** @description Page number (1-based) */
    PageParam: number;
    /** @description Items per page */
    LimitParam: number;
    /** @description Free-text search keywords */
    KeywordsParam: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getSession: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully retrieved session information */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            user: {
              /** @example student */
              name: string;
              /** @example student@gmail.com */
              email: string;
              /** @example 1 */
              id: string;
              /** @example student */
              role: string;
            };
            /**
             * Format: date-time
             * @example 2025-07-03T14:08:10.770Z
             */
            expires: string;
          };
        };
      };
    };
  };
  getMyRecommendations: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully retrieved recommendations */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SuccessResponse"];
        };
      };
    };
  };
  getCompetitionById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Competition ID */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Competition retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example true */
            success: boolean;
            data: components["schemas"]["CompetitionDetail"];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Competition not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  deleteCompetitionById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Competition ID */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Competition deleted successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example true */
            success?: boolean;
          };
        };
      };
    };
  };
}
