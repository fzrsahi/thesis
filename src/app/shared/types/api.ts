/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all users
     * @description Returns a list of all users
     */
    get: operations["getUsers"];
    put?: never;
    /**
     * Create a new user
     * @description Creates a new user in the system
     */
    post: operations["createUser"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user by ID
     * @description Returns a single user by ID
     */
    get: operations["getUserById"];
    /**
     * Update user
     * @description Updates an existing user
     */
    put: operations["updateUser"];
    post?: never;
    /**
     * Delete user
     * @description Deletes a user by ID
     */
    delete: operations["deleteUser"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/dashboard": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get dashboard data
     * @description Returns dashboard statistics and information
     */
    get: operations["getDashboard"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    User: {
      /**
       * Format: uuid
       * @description Unique identifier for the user
       */
      id: string;
      /** @description Username for the user */
      username: string;
      /**
       * Format: email
       * @description Email address of the user
       */
      email: string;
      /** @description Full name of the user */
      fullName?: string;
      /**
       * Format: date-time
       * @description Date and time when the user was created
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Date and time when the user was last updated
       */
      updatedAt: string;
    };
    UserInput: {
      /** @description Username for the user */
      username: string;
      /**
       * Format: email
       * @description Email address of the user
       */
      email: string;
      /** @description Full name of the user */
      fullName?: string;
      /**
       * Format: password
       * @description Password for the user account
       */
      password: string;
    };
    Dashboard: {
      /** @description Total number of users in the system */
      userCount?: number;
      /** @description Number of active users */
      activeUsers?: number;
      /** @description Recent activity in the system */
      recentActivity?: components["schemas"]["Activity"][];
      /** @description Various system statistics */
      statistics?: {
        [key: string]: number;
      };
    };
    Activity: {
      /**
       * Format: uuid
       * @description Unique identifier for the activity
       */
      id: string;
      /**
       * Format: uuid
       * @description ID of the user who performed the activity
       */
      userId: string;
      /** @description Type of action performed */
      action: string;
      /**
       * Format: date-time
       * @description When the activity occurred
       */
      timestamp: string;
      /** @description Additional details about the activity */
      details?: Record<string, never>;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getUsers: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  createUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description User object to be created */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserInput"];
      };
    };
    responses: {
      /** @description User created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getUserById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the user to return */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the user to update */
        id: string;
      };
      cookie?: never;
    };
    /** @description User object with updated values */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserInput"];
      };
    };
    responses: {
      /** @description User updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Invalid input */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the user to delete */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User deleted successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getDashboard: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
