generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// User & Roles
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Admin   Admin?
  Student Student?
  Advisor Advisor?

  @@map("users")
}

model Admin {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Student {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gpa        String? // IPK mahasiswa
  interests  String[] // Array minat, contoh: ["AI","Desain"]
  transcript String? // ID transkrip nilai
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  achievements    Achievement[]
  experiences     Experience[]
  recommendations Recommendation[]
  competitions    StudentCompetition[]
  chatSessions    LLMChatSession[]

  @@map("students")
}

model Advisor {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("advisors")
}

/// Student Data
model Achievement {
  id          Int      @id @default(autoincrement())
  studentId   Int
  title       String // Judul prestasi
  description String? // Deskripsi detail
  date        DateTime // Tanggal prestasi
  createdAt   DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("achievements")
}

model Experience {
  id           Int       @id @default(autoincrement())
  studentId    Int
  organization String // Nama organisasi/perusahaan/institusi
  position     String? // Jabatan/posisi dalam pengalaman
  description  String? // Deskripsi pengalaman
  startDate    DateTime // Mulai pengalaman
  endDate      DateTime? // Selesai (opsional)
  createdAt    DateTime  @default(now())

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("experiences")
}

/// Competitions Catalog
model Competition {
  id           Int      @id @default(autoincrement())
  title        String // Judul lomba, misalnya: "GEMASTIK Data Mining"
  description  String // Deskripsi lomba
  field        String[] // Bidang, misalnya: "Teknologi", "Desain" (untuk Category Distribution)
  type         String // Jenis: "Individu" atau "Tim"
  minGPA       String? // IPK minimal
  requirements Json?    @default("{}") // Kriteria khusus, contoh: {"language": "Python", "experience": "Hackathon"}
  startDate    DateTime // Tanggal mulai lomba
  endDate      DateTime // Tanggal berakhir / deadline
  location     String? // Lokasi lomba (opsional)
  organizer    String? // Penyelenggara (opsional)
  createdAt    DateTime @default(now())

  participants StudentCompetition[]
  stats        CompetitionStats? // Relasi ke statistik kompetisi

  @@map("competitions")
}

/// Competition Statistics (untuk Category Distribution dan Performance Metrics)
model CompetitionStats {
  id                   Int         @id @default(autoincrement())
  competitionId        Int         @unique
  competition          Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  categoryDistribution Json        @default("{}") // Untuk pie chart, contoh: {"Teknologi": 0.6, "Desain": 0.3}
  performanceMetrics   Json        @default("{}") // Untuk bar chart, contoh: {"participation_rate": 0.7, "avg_match_score": 0.85}
  updatedAt            DateTime    @updatedAt

  @@map("competitionStats")
}

/// Matching Results
model StudentCompetition {
  id            Int      @id @default(autoincrement())
  studentId     Int
  competitionId Int
  matchScore    Float    @default(0.0) // 0.0â€“1.0: skor kecocokan AI (driven by RAG)
  applied       Boolean  @default(false) // Status pendaftaran
  feedback      String? // Komentar / feedback user
  rating        Int? // Nilai 1-5
  createdAt     DateTime @default(now())

  student     Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  competition Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)

  @@unique([studentId, competitionId])
  @@map("studentCompetitions")
}

/// Recommendation Logs
model Recommendation {
  id        Int      @id @default(autoincrement())
  studentId Int
  prompt    String // Prompt yang dikirim ke LLM (termasuk konteks RAG)
  response  Json // Output LLM dalam format JSON
  createdAt DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("recommendations")
}

/// Chat Sessions & Messages
model LLMChatSession {
  id        Int      @id @default(autoincrement())
  studentId Int
  title     String? // Judul sesi opsional
  createdAt DateTime @default(now())

  student  Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  messages LLMChatMessage[]

  @@map("llmChatSessions")
}

model LLMChatMessage {
  id        Int      @id @default(autoincrement())
  sessionId Int
  role      String // "user" atau "assistant"
  content   String // Isi pesan
  createdAt DateTime @default(now())

  session LLMChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("llmChatMessages")
}

/// Alumni Data for RAG Knowledge Base
model AlumniExperience {
  id           Int      @id @default(autoincrement())
  name         String // Nama senior
  gpa          String // IPK mereka
  interests    String[] // Minat senior sebagai array JSON
  achievements String? // Ringkasan prestasi
  organization String? // Organisasi utama
  competition  String // Nama lomba yang diikuti
  result       String // Hasil lomba, contoh: "Juara 1"
  year         Int // Tahun lomba
  createdAt    DateTime @default(now())

  @@map("alumniExperiences")
}

/// Embeddings (Crucial for RAG: use pgvector for ease of vector querying)
model Embedding {
  id        Int      @id @default(autoincrement())
  model     String // e.g. "all-MiniLM-L6-v2"
  vector    Bytes // Simpan vektor (byte array)
  metadata  Json?    @default("{}") // Contoh: { "type": "competition", "id": 5 }
  createdAt DateTime @default(now())

  @@map("embeddings")
}
