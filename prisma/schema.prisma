generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

/// User & Roles
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Admin   Admin?
  Student Student?
  Advisor Advisor?

  LLMChatSession LLMChatSession[]

  @@map("users")
}

model Admin {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Student {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gpa       String? // IPK mahasiswa
  interests String[] // Array minat, contoh: ["AI","Desain"]
  skills    String[] // Array keterampilan, contoh: ["Python","Java"]
  studentId String? // ID mahasiswa
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  achievements    Achievement[]
  experiences     Experience[]
  recommendations Recommendation[]
  transcript      Transcript[]
  studentDocumentChunks StudentDocumentChunk[]

  @@map("students")
}

model Transcript {
  id             Int      @id @default(autoincrement())
  studentId      Int
  fileId         String
  semester       String
  transcriptText String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("transcripts")
}

model Advisor {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("advisors")
}

/// Student Data
model Achievement {
  id          Int      @id @default(autoincrement())
  studentId   Int
  title       String // Judul prestasi
  description String? // Deskripsi detail
  date        DateTime // Tanggal prestasi
  createdAt   DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("achievements")
}

model Experience {
  id           Int       @id @default(autoincrement())
  studentId    Int
  organization String // Nama organisasi/perusahaan/institusi
  position     String? // Jabatan/posisi dalam pengalaman
  description  String? // Deskripsi pengalaman
  startDate    DateTime // Mulai pengalaman
  endDate      DateTime? // Selesai (opsional)
  createdAt    DateTime  @default(now())

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("experiences")
}

model competitions {
  id                 Int       @id @default(autoincrement())
  title              String // Judul lomba, misalnya: "Program Kreativitas Mahasiswa Karsa Cipta"
  description        String // Deskripsi lomba
  field              String[] // Bidang, misalnya: ["Aplikasi Mobile", "Sistem Informasi", "Kecerdasan Buatan"]
  type               String? // Jenis: "Individual", "Team", atau "Both"
  minGPA             String? // IPK minimal
  requirements       Json?     @default("{}") // Kriteria khusus, contoh: {"team_composition": "3-5 mahasiswa", "originality": "Karya harus orisinal"}
  startDate          DateTime? // Tanggal mulai lomba
  endDate            DateTime? // Tanggal berakhir / deadline
  location           String? // Lokasi lomba (opsional)
  organizer          String? // Penyelenggara (opsional)
  evaluationCriteria Json?     @default("{}") // Kriteria penilaian, contoh: {"preliminary_round": "...", "final_round": "..."}
  sourceUrl          String? // URL sumber informasi lomba
  relevantCourses    String[] // Mata kuliah yang relevan
  relevantSkills     String[] // Keterampilan yang relevan
  fileId             String? // File dokumen lomba

  vector         Unsupported("vector")?
  content        String?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @default(now())
  documentChunks documentChunks[]

  competitionStats CompetitionStats?
}

model CompetitionStats {
  id                      Int                       @id @default(autoincrement())
  competitionId           Int                       @unique
  competition             competitions              @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  summary                 String? // Ringkasan statistik kompetisi
  pastUngParticipants     PastUngParticipant[] // Peserta UNG di tahun-tahun sebelumnya
  totalApplicantsPastYear TotalApplicantsPastYear[] // Jumlah pendaftar per tahun
  updatedAt               DateTime                  @default(now())
  createdAt               DateTime                  @default(now())

  @@map("competitionStats")
}

model documentChunks {
  id      String                 @id @default(uuid()) // Kunci utama UUID
  content String                 @db.Text
  vector  Unsupported("vector")?

  competitionId Int
  createdAt     DateTime @default(now())

  competition competitions @relation(fields: [competitionId], references: [id], onDelete: Cascade)

  @@map("documentChunks")
}

model PastUngParticipant {
  id                 Int              @id @default(autoincrement())
  competitionStatsId Int
  year               String? // Tahun partisipasi peserta dari Universitas Negeri Gorontalo (UNG)
  name               String? // Nama peserta dari UNG
  count              Int? // Jumlah anggota dalam tim atau 1 jika individu
  competitionStats   CompetitionStats @relation(fields: [competitionStatsId], references: [id], onDelete: Cascade)

  @@map("pastUngParticipants")
}

model TotalApplicantsPastYear {
  id                 Int     @id @default(autoincrement())
  competitionStatsId Int
  count              Int? // Jumlah pendaftar pada tahun tertentu. Null jika tidak diketahui
  year               String? // Tahun terkait. Null jika tidak disebut

  competitionStats CompetitionStats @relation(fields: [competitionStatsId], references: [id], onDelete: Cascade)

  @@map("totalApplicantsPastYear")
}

model Recommendation {
  id                Int      @id @default(autoincrement())
  studentId         Int
  prompt            String   @db.Text
  studentSummary    String?  @db.Text
  overallAssessment String?  @db.Text
  createdAt         DateTime @default(now())

  student                    Student?                              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  skillsProfiles             RecommendationSkillProfile[]
  competitionRecommendations RecommendationCompetition[]
  developmentSuggestions     RecommendationDevelopmentSuggestion[]

  @@map("recommendations")
}

model RecommendationSkillProfile {
  id               Int    @id @default(autoincrement())
  recommendationId Int
  skillName        String
  score            Float
  breakdown        String @db.Text

  recommendation Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)

  @@map("recommendationSkillProfiles")
}

model RecommendationCompetition {
  id                Int      @id @default(autoincrement())
  recommendationId  Int
  competitionId     Int
  competitionName   String
  rank              Int
  matchScore        Float
  matchReason       String?  @db.Text
  reasoning         String?  @db.Text
  keyFactors        String?  @db.Text
  preparationTips   String?  @db.Text
  skillRequirements String?  @db.Text
  feedbackScore     Float?   @default(0.0)
  feedbackReason    String?
  createdAt         DateTime @default(now())

  recommendation Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)

  @@map("recommendationCompetitions")
}

model RecommendationDevelopmentSuggestion {
  id               Int    @id @default(autoincrement())
  recommendationId Int
  type             String // "course", "practice", "certification"
  title            String
  link             String
  reason           String @db.Text

  recommendation Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)

  @@map("recommendationDevelopmentSuggestions")
}

model LLMChatSession {
  id        Int      @id @default(autoincrement())
  userId Int
  title     String?
  createdAt DateTime @default(now())

  user  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages LLMChatMessage[]

  @@map("llmChatSessions")
}

model LLMChatMessage {
  id        Int      @id @default(autoincrement())
  sessionId Int
  role      String // "user" atau "assistant"
  content   String // Isi pesan
  createdAt DateTime @default(now())

  session LLMChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("llmChatMessages")
}

/// Student-specific vectorized knowledge base
model StudentDocumentChunk {
  id        String   @id @default(uuid())
  studentId Int
  content   String   @db.Text
  vector    Unsupported("vector")?
  createdAt DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("studentDocumentChunks")
}
